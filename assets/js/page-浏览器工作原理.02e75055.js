(window.webpackJsonp=window.webpackJsonp||[]).push([[217],{723:function(t,v,a){"use strict";a.r(v);var r=a(1),e=Object(r.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"浏览器工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器工作原理"}},[t._v("#")]),t._v(" 浏览器工作原理")]),t._v(" "),a("h2",{attrs:{id:"多进程浏览器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多进程浏览器"}},[t._v("#")]),t._v(" 多进程浏览器")]),t._v(" "),a("p",[t._v("1.浏览器进程")]),t._v(" "),a("blockquote",[a("p",[t._v("主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。")])]),t._v(" "),a("p",[t._v("2.渲染进程")]),t._v(" "),a("blockquote",[a("p",[t._v("核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。")])]),t._v(" "),a("p",[t._v("3.GPU 进程")]),t._v(" "),a("blockquote",[a("p",[t._v("其实，Chrome 刚开始发布的时候是没有 GPU 进程的。而 GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。")])]),t._v(" "),a("p",[t._v("4.网络进程")]),t._v(" "),a("blockquote",[a("p",[t._v("主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。")])]),t._v(" "),a("p",[t._v("5.插件进程")]),t._v(" "),a("blockquote",[a("p",[t._v("主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。")])]),t._v(" "),a("h2",{attrs:{id:"浏览器端发起-http-请求流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器端发起-http-请求流程"}},[t._v("#")]),t._v(" 浏览器端发起 HTTP 请求流程")]),t._v(" "),a("p",[t._v("1.构建请求")]),t._v(" "),a("blockquote",[a("p",[t._v("首先，浏览器构建请求行信息（如下所示），构建好后，浏览器准备发起网络请求。")])]),t._v(" "),a("p",[t._v("2.查找缓存")]),t._v(" "),a("blockquote",[a("p",[t._v("在真正发起网络请求之前，浏览器会先在浏览器缓存中查询是否有要请求的文件。其中，浏览器缓存是一种在本地保存资源副本，以供下次请求时直接使用的技术。当浏览器发现请求的资源已经在浏览器缓存中存有副本，它会拦截请求，返回该资源的副本，并直接结束请求，而不会再去源服务器重新下载。这样做的好处有：缓解服务器端压力，提升性能（获取资源的耗时更短了）；对于网站来说，缓存是实现快速资源加载的重要组成部分。当然，如果缓存查找失败，就会进入网络请求过程了。")])]),t._v(" "),a("p",[t._v("3.准备 IP 地址和端口")])])}),[],!1,null,null,null);v.default=e.exports},747:function(t,v,a){"use strict";a.r(v);var r=a(1),e=Object(r.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"浏览器工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器工作原理"}},[t._v("#")]),t._v(" 浏览器工作原理")]),t._v(" "),a("p",[t._v("作为一名前端开发者，虽然经常基于浏览器做应用层开发，但在工作中很少会去深究浏览器的内部运行原理，比如 JavaScript 是怎样运行，页面是怎样渲染出来的，浏览器中的网络和安全问题等等。")]),t._v(" "),a("p",[t._v("市面上浅显易懂的学习资料不多，李兵老师出的《浏览器基本原理与实践》这门课确实不错，它是我的主要学习资料。后来查询更多资料时发现，前端社区很多浏览器方面的课程和文章中都有这门课的影子，这也是一种站在巨人肩膀上的学习了。")]),t._v(" "),a("p",[t._v("正如李兵老师所说：了解浏览器是如何工作的，能让你站在更高维度去理解前端。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("这个系列将基于 Google Chrome 浏览器进行学习和实验，所以很多特性也仅是面向该浏览器的（或同一内核的现代浏览器）。大部分较为深入和底层的知识点来源于《浏览器基本原理与实践》这一课程，同时也参考了市面上其它课程的浏览器相关章节。在整理的时候没有完全按照原课程的内容排版，而是根据自己的思路来梳理，方便理解和记忆。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("关于浏览器的知识点，主要参考：")]),t._v(" "),a("ul",[a("li",[t._v("《浏览器工作原理与实践》（极客时间）")])]),t._v(" "),a("div",{staticStyle:{"text-align":"right"}},[a("svg",{staticClass:"icon",attrs:{t:"1638087443976",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"8869",width:"64",height:"64"}},[a("path",{attrs:{d:"M123.648 178.346667C361.642667-98.602667 802.986667-43.946667 967.936 279.68h-396.501333c-71.424 0-117.546667-1.621333-167.509334 24.661333-58.709333 30.933333-102.997333 88.234667-118.485333 155.52L123.648 178.389333z",fill:"#EA4335","p-id":"8870"}}),a("path",{attrs:{d:"M341.674667 512c0 93.866667 76.330667 170.24 170.154666 170.24 93.866667 0 170.154667-76.373333 170.154667-170.24s-76.330667-170.24-170.154667-170.24c-93.866667 0-170.154667 76.373333-170.154666 170.24z",fill:"#4285F4","p-id":"8871"}}),a("path",{attrs:{d:"M577.877333 734.848c-95.530667 28.373333-207.274667-3.114667-268.501333-108.8-46.762667-80.64-170.24-295.765333-226.346667-393.557333-196.565333 301.226667-27.136 711.808 329.685334 781.866666l165.12-279.509333z",fill:"#34A853","p-id":"8872"}}),a("path",{attrs:{d:"M669.866667 341.76a233.130667 233.130667 0 0 1 43.008 286.634667c-40.576 69.973333-170.154667 288.682667-232.96 394.581333 367.658667 22.656 635.733333-337.664 514.645333-681.258667H669.866667z",fill:"#FBBC05","p-id":"8873"}})])])])}),[],!1,null,null,null);v.default=e.exports}}]);